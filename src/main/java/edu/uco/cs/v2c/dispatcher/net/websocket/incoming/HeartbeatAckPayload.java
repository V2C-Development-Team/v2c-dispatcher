/*
 * Copyright (c) 2020 V2C Development Team. All rights reserved.
 * Licensed under the Version 0.0.1 of the V2C License (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at <https://tinyurl.com/v2c-license>.
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions 
 * limitations under the License.
 */
package edu.uco.cs.v2c.dispatcher.net.websocket.incoming;

import java.util.UUID;

import org.json.JSONException;
import org.json.JSONObject;

import edu.uco.cs.v2c.dispatcher.net.websocket.PayloadHandlingException;
import edu.uco.cs.v2c.dispatcher.net.websocket.incoming.IncomingPayload.IncomingAction;

/**
 * Encapsulates the incoming {@link IncomingAction#HEARTBEAT_ACK} payload.
 * 
 * @author Caleb L. Power
 */
public class HeartbeatAckPayload extends IncomingPayload {

  private static final String APP_VAR = "app";
  private static final String KEY_VAR = "key";
  private static final String TIMESTAMP_VAR = "timestamp";
  
  private long timestamp = 0L;
  private String app = null;
  private UUID key = null;
  
  /**
   * Instantiates the REGISTER_LISTENER payload.
   * 
   * @param raw the raw JSON
   * @throws PayloadHandlingException if the payload was invalid
   */
  public HeartbeatAckPayload(JSONObject raw) throws PayloadHandlingException {
    super(raw, IncomingAction.HEARTBEAT_ACK);
    
    try {
      app = raw.getString(APP_VAR);
      key = UUID.fromString(raw.getString(KEY_VAR));
      timestamp = raw.getLong(TIMESTAMP_VAR); 
    } catch(IllegalArgumentException | JSONException e) {
      throw new PayloadHandlingException(action, e, raw);
    }
  }
  
  /**
   * Retrieves the unique identifier of the application in question.
   * 
   * @return the application's unique identifier
   */
  public String getApp() {
    return app;
  }
  
  /**
   * Retrieves the unique key of the incoming ack.
   * 
   * @return the unique UUID of the original request-- note that multiple acks
   *         might be returned if multiple applications are listening on the
   *         same WebSocket (the burden of implementation is on the client)
   */
  public UUID getKey() {
    return key;
  }
  
  /**
   * Retrieves the timestamp representing the time at which the ack was
   * generated by the client prior to dispatch.
   * 
   * @return the number of milliseconds after the UNIX epoch during which the
   *         ack was generated by the client
   */
  public long getTimestamp() {
    return timestamp;
  }

}
